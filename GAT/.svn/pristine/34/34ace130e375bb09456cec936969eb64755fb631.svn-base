package com.baidu.gameqa.Gat.executor;

import java.io.IOException;
import java.util.HashMap;

import org.xml.sax.SAXException;




import com.baidu.gameqa.Gat.dataobject.EnumObjectManager;
import com.baidu.gameqa.Gat.dataobject.InvokedMethodInfo;
import com.baidu.gameqa.Gat.dataobject.stepparameter.InterfaceMulitStepParameter;
import com.baidu.gameqa.Gat.dataobject.testcase.EnumSetupType;
import com.baidu.gameqa.Gat.dataobject.testcase.InterfaceSingleStepCase;
import com.baidu.gameqa.Gat.manager.IManager;
import com.baidu.gameqa.Gat.manager.TestObjectManagerFactory;
import com.baidu.gameqa.Gat.util.GlobalConfig;
import com.baidu.gameqa.Gat.util.ParameterChecker;
import com.baidu.gameqa.Gat.util.StepValuePool;
import com.baidu.gameqa.Lib.httpunitService.HttpUnitHelper;
import com.meterware.httpunit.WebConversation;
import com.meterware.httpunit.WebRequest;
import com.meterware.httpunit.WebResponse;

import org.junit.Assert;

public class InterfaceSingleStepExecutor extends CaseExecutor
{
	private String caseID="";
	private String caseFilePath="";	
    private InterfaceSingleStepCase targetCase=null;
	
	public InterfaceSingleStepExecutor(String caseID) throws Exception 
	{
		String[] caseIDs=splitCaseID(caseID);
		this.caseFilePath="DataFiles"+GlobalConfig.getSlash()+"Excels"+GlobalConfig.getSlash()+caseIDs[0];
		this.caseID=caseIDs[1]+"."+caseIDs[2];
	}

	@Override
	public void setUp() throws Exception 
	{
	   preCleanup();
	   setGlobalConfig();
	   exectuePreStep();
	}

	@Override
	public void executeCase() throws Exception
	{
        WebResponse currentResponse=getResponse(getUrl(targetCase),targetCase.getUrlParameters(),targetCase.getHttpMethod());
        assertResult(targetCase.getExpectResult(), currentResponse.getText(),targetCase.getAssertType());
	}

	@Override
	public void tearDown() throws Exception {
		GlobalConfig.setStepsParameterFilePath("DataFiles"+GlobalConfig.getSlash()+"Excels"+GlobalConfig.getSlash()+"TearDownParameters.xml"); //set glocal config for pre step parameters
		if(!targetCase.getTearDownType().equals("$NULL"))
		{
			Integer enumValue=Enum.valueOf(EnumSetupType.class,targetCase.getTearDownType()).ordinal();
			switch (enumValue)
			{
			case 0:
				executeSql(targetCase.getTearDown());
				break;
			case 1:
				invokeDBStep(targetCase.getTearDown());
			case 2:
				InvokedMethodInfo methodInfo= parserPreStepMethodInfo(targetCase.getTearDown(),null);
				invokeMethod(methodInfo);
			}
		}
		
	}
	
	private String[] splitCaseID(String caseID) throws Exception
	{
		ParameterChecker.StringParameterCheck("caseID",caseID);
		return caseID.split("\\.");
	}
    
	private void setGlobalConfig()
	{
		GlobalConfig.setTestCaseFilePath(this.caseFilePath+".xlsx"); //set global config for testcase file path
	}
	
	private void exectuePreStep() throws Exception
	{
		targetCase=(InterfaceSingleStepCase)getTestObject(this.caseID,EnumObjectManager.ISingleStepCaseManager);
		GlobalConfig.setStepsParameterFilePath("DataFiles"+GlobalConfig.getSlash()+"Excels"+GlobalConfig.getSlash()+"SetupParameters.xml"); //set glocal config for pre step parameters
		if(!targetCase.getSetupType().equals("$NULL"))
		{
			Integer enumValue=Enum.valueOf(EnumSetupType.class,targetCase.getSetupType()).ordinal();
			switch (enumValue)
			{
			case 0:
				executeSql(targetCase.getSetup());
				break;
			case 1:
				invokeDBStep(targetCase.getSetup());
			case 2:
				InvokedMethodInfo methodInfo= parserPreStepMethodInfo(targetCase.getSetup(),null);
				Object returnValue=invokeMethod(methodInfo);
				StepValuePool.createInstance().getValueDic().put(GlobalConfig.getPreStepResult(),returnValue);
			}
		}
	}

	
    
    private String getUrl(InterfaceSingleStepCase testCase)
    {
    	String targetUrl="";
         if(testCase.getDomainName().trim()!="")
         {
        	 targetUrl=testCase.getDomainName()+"/";
         }
         else 
         {
			targetUrl=GlobalConfig.getDomainName()+"/";
		 }
         targetUrl=targetUrl+testCase.getPath();
         return targetUrl;
    }
    
    private WebResponse getResponse(String url,HashMap<String,String> parameters,String httpMethod) throws IOException, SAXException
    {
    	 WebConversation currentConversation=  HttpUnitHelper.createConversation();
         WebRequest currentRequest=HttpUnitHelper.createWebRequest(url,httpMethod);
         if(parameters!=null)
         {
        	 HttpUnitHelper.setParameters(currentRequest, parameters);
         }
         WebResponse response=currentConversation.getResponse(currentRequest);
         return response;
    }
    
    private void assertResult(String expectResult,String actualResult,String assertType ) throws Exception
    {
    	switch(assertType)
    	{
    	case "Equal":
    		Assert.assertArrayEquals("Are equal exception ", expectResult.toCharArray(), actualResult.toCharArray());
    		break;
    	case "Contains":
    		Assert.assertTrue("Assert true exception", actualResult.contains(expectResult));
    		break;
    	case "Custom":
    		Object[] parameters={expectResult,actualResult};
    		InvokedMethodInfo methodInfo= parserPreStepMethodInfo(targetCase.getSetup(),parameters);
    		invokeMethod(methodInfo);
    		break;
    	}
    }
  
}

