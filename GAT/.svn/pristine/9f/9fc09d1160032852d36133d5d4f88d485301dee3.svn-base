package com.baidu.gameqa.Gat.executor;

import com.baidu.gameqa.Gat.dataobject.EnumObjectManager;
import com.baidu.gameqa.Gat.dataobject.TestObject;
import com.baidu.gameqa.Gat.dataobject.stepparameter.InterfaceMulitStepParameter;
import com.baidu.gameqa.Gat.dataobject.testcase.EnumSetupType;
import com.baidu.gameqa.Gat.dataobject.testcase.InterfaceSingleStepCase;
import com.baidu.gameqa.Gat.manager.IManager;
import com.baidu.gameqa.Gat.manager.TestObjectManagerFactory;
import com.baidu.gameqa.Gat.util.GlobalConfig;
import com.baidu.gameqa.Gat.util.ParameterChecker;
import com.baidu.gameqa.Lib.dbService.DBOperationService;

public class InterfaceSingleStepExecutor extends CaseExecutor
{
	private String caseID="";
	private String caseFilePath="";	

	public InterfaceSingleStepExecutor(String caseID) throws Exception 
	{
		String[] caseIDs=splitCaseID(caseID);
		this.caseFilePath="DataFiles\\Excels\\"+caseIDs[0];
		this.caseID=caseIDs[1]+caseIDs[2];
	}

	@Override
	public void setUp() throws Exception 
	{
	   setGlobalConfig();
	   exectuePreStep();
	}

	@Override
	public void executeCase() throws Exception {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void tearDown() throws Exception {
		// TODO Auto-generated method stub
		
	}
	
	private String[] splitCaseID(String caseID) throws Exception
	{
		ParameterChecker.StringParameterCheck("caseID",caseID);
		return caseID.split(".");
	}
    
	private void setGlobalConfig()
	{
		GlobalConfig.setTestCaseFilePath(this.caseFilePath+".xlsx"); //set global config for testcase file path
		GlobalConfig.setStepsParameterFilePath(this.caseFilePath+".xml"); //set glocal config for step parameters
	}
	
	private void exectuePreStep() throws Exception
	{
		InterfaceSingleStepCase caseResult=(InterfaceSingleStepCase)getTestObject(this.caseID,EnumObjectManager.ISingleStepCaseManager);
		if(caseResult.getSetupType()!="")
		{
			Integer enumValue=Enum.valueOf(EnumSetupType.class,caseResult.getSetupType()).ordinal();
			switch (enumValue)
			{
			case 0:
				executeSql(caseResult.getSetup());
				break;
			case 1:
				invokeDBStep(caseResult.getSetup());
			case 2:
				invokePreStepMethod(caseResult.getSetup());
			}
		}
	}
	
  
	private void executeSql(String sqlContextID) throws Exception
	{
       InterfaceMulitStepParameter parameters=(InterfaceMulitStepParameter)getTestObject(sqlContextID, EnumObjectManager.IMulitStepParameterManager);
        
	}
	
	private void invokeDBStep(String dbStepID)
	{
		
	}
	
	private void invokePreStepMethod(String stepMethodName)
	{
		
	}
}

