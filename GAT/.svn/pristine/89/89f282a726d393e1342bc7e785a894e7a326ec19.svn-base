package com.baidu.gameqa.Gat.executor;

import com.baidu.gameqa.Gat.dataobject.EnumObjectManager;
import com.baidu.gameqa.Gat.dataobject.stepparameter.InterfaceMulitStepParameter;
import com.baidu.gameqa.Gat.dataobject.testcase.EnumSetupType;
import com.baidu.gameqa.Gat.dataobject.testcase.InterfaceSingleStepCase;
import com.baidu.gameqa.Gat.util.GlobalConfig;
import com.baidu.gameqa.Gat.util.ParameterChecker;
import com.baidu.gameqa.Gat.util.StepValuePool;
import com.baidu.gameqa.Lib.common.ClassReflector;
import com.baidu.gameqa.Lib.dbService.DBOperationService;
import com.baidu.gameqa.Lib.dbService.DBProvider;

public class InterfaceSingleStepExecutor extends CaseExecutor
{
	private String caseID="";
	private String caseFilePath="";	
    private InterfaceSingleStepCase targetCase=null;
	
	public InterfaceSingleStepExecutor(String caseID) throws Exception 
	{
		String[] caseIDs=splitCaseID(caseID);
		this.caseFilePath="DataFiles\\Excels\\"+caseIDs[0];
		this.caseID=caseIDs[1]+caseIDs[2];
	}

	@Override
	public void setUp() throws Exception 
	{
	   preCleanup();
	   setGlobalConfig();
	   exectuePreStep();
	}

	@Override
	public void executeCase() throws Exception
	{

	}

	@Override
	public void tearDown() throws Exception {
		// TODO Auto-generated method stub
		
	}
	
	private String[] splitCaseID(String caseID) throws Exception
	{
		ParameterChecker.StringParameterCheck("caseID",caseID);
		return caseID.split(".");
	}
    
	private void setGlobalConfig()
	{
		GlobalConfig.setTestCaseFilePath(this.caseFilePath+".xlsx"); //set global config for testcase file path
		GlobalConfig.setStepsParameterFilePath(this.caseFilePath+".xml"); //set glocal config for step parameters
	}
	
	private void exectuePreStep() throws Exception
	{
		targetCase=(InterfaceSingleStepCase)getTestObject(this.caseID,EnumObjectManager.ISingleStepCaseManager);
		if(targetCase.getSetupType()!="")
		{
			Integer enumValue=Enum.valueOf(EnumSetupType.class,targetCase.getSetupType()).ordinal();
			switch (enumValue)
			{
			case 0:
				executeSql(targetCase.getSetup());
				break;
			case 1:
				invokeDBStep(targetCase.getSetup());
			case 2:
				Object returnValue=invokePreStepMethod(targetCase.getSetup());
				StepValuePool.createInstance().getValueDic().put(GlobalConfig.getPreStepResult(),returnValue);
			}
		}
	}
	
	private void executeSql(String sqlContextID) throws Exception
	{
       InterfaceMulitStepParameter parameters=(InterfaceMulitStepParameter)getTestObject(sqlContextID, EnumObjectManager.IMulitStepParameterManager);
       DBOperationService.executeNoneQuery(parameters.ConnectiongString,parameters.CommandText,DBProvider.Mysql);
	}
	
	private void invokeDBStep(String dbStepID) throws Exception
	{
	   throw new Exception("not impliement!");
	}
	
	private Object invokePreStepMethod(String methodInfo) throws Exception
	{
		ParameterChecker.StringParameterCheck("pretStepMethodName",methodInfo);
		Object targetClassInstanceObject=null;
		String preStepMethodInfo=methodInfo;
		String preStepMethodParameterValue=null;
		Object[] methodParameters=new Object[1];
		String methodName="";
		String classFullName="";
		if(methodInfo.contains(":"))//has parameter for preStepMethod
		{
			preStepMethodInfo=methodInfo.split(":")[0];
			preStepMethodParameterValue=methodInfo.split(":")[1];
		    methodParameters[0]=preStepMethodParameterValue;
		    methodName=preStepMethodInfo.substring(preStepMethodInfo.lastIndexOf(".")+1);
            classFullName=preStepMethodInfo.replace("."+methodName,"");
		}
		else
		{
			methodParameters[0]="";
			methodName=preStepMethodInfo.substring(preStepMethodInfo.lastIndexOf(".")+1);
	        classFullName=preStepMethodInfo.replace("."+methodName,""); 		
		}
		targetClassInstanceObject= ClassReflector.createInstance(classFullName); //create target instance
		return ClassReflector.getMethod(targetClassInstanceObject,methodName,methodParameters).invoke(targetClassInstanceObject,methodParameters);
	}
	
    private void preCleanup()
	{
		StepValuePool.createInstance().getValueDic().remove(GlobalConfig.getPreStepResult());
	}
    
    private String getUrl(InterfaceSingleStepCase testCase)
    {
    	String targetUrl="";
         if(testCase.getDomainName().trim()!="")
         {
        	 targetUrl=testCase.getDomainName()+"/";
         }
         else 
         {
			targetUrl=GlobalConfig.getDomainName()+"/";
		 }
         targetUrl=targetUrl+testCase.getPath()+"/";
         return targetUrl;
    }
}

